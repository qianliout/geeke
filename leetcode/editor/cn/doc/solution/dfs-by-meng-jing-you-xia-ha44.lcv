### 解题思路

根据题目意思，我们汇总需要的信息：
1：数的高度->通过层次遍历得到hight
2：数的宽度->通过题目给的公式2^hight - 1得到
3：元素坐标->根节点每次存储在数组的当前大小的中间；
左子树根节点为：index（当前下标） - (size + 1) / 2（当前层次范围大小）
右子树根节点为：index（当前下标） + (size + 1) / 2（当前层次范围大小）

### 代码

* cpp

```cpp

class Solution {
public:
    vector<vector<string>> printTree(TreeNode* root) {
        queue<TreeNode*> que;
        if (!root)
        {
            return {};
        }
        que.push(root);
        int hight = 0;
        //层次遍历
        while (!que.empty())
        {
            hight++;
            int size = que.size();
            for (int i = 0; i < size; i++)
            {
                if (que.front()->left)
                {
                    que.push(que.front()->left);
                }
                if (que.front()->right)
                {
                    que.push(que.front()->right);
                }
                que.pop();
            }
        }
        //得到矩阵的列数：size
        int size = 1;
        for (int i = 0; i < hight; i++)
        {
            size *= 2;
        }
        size--;
        //定义矩阵的行与列的大小，分别为hight和size;
        vector<vector<string>> nums(hight, vector<string>(size));
        //深搜，遍历树
        dfs(root, size / 2, nums, 0, size / 2);
        //返回经过搜索后的二维数组
        return nums;
    }
    void dfs(TreeNode* root, int index, vector<vector<string>>& nums, int hight, int size)
    {
        if (!root)
        {
            return;
        }
        //把当前节点的值写到矩阵中
        nums[hight][index] = to_string(root->val);
        if (root->left)
        {
            //遍历左子树，传入下一个节点对应的下标，hight + 1 ，同时把范围缩小一半
            dfs(root->left, index - (size + 1) / 2, nums, hight + 1, size / 2);
        }
        if (root->right)
        {
            dfs(root->right, index + (size + 1) / 2, nums, hight + 1, size / 2);
        }

    }
};
```


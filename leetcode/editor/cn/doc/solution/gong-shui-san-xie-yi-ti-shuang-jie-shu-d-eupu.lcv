## 树的遍历

一个朴素的做法是，直接对树进行遍历（广度 & 深度），使用 `HashSet` 进行存储，得到所有去重后的节点大小。

然后找次小值的方式有多种：可以通过排序找次小值，复杂度为 $O(n\log{n})$；也可以使用经典的两个变量 & 一次遍历的方式，找到次小值，复杂度为 $O(n)$。

代码：

* []

```Java
class Solution {
    Set<Integer> set = new HashSet<>();
    public int findSecondMinimumValue(TreeNode root) {
        dfs(root);
        if (set.size() < 2) return -1;
        int first = Integer.MAX_VALUE, second = Integer.MAX_VALUE;
        for (int i : set) {
            if (i <= first) {
                second = first;
                first = i;
            } else if (i <= second) {
                second = i;
            }
        }
        return second;
    }
    void dfs(TreeNode root) {
        if (root == null) return;
        set.add(root.val);
        dfs(root.left);
        dfs(root.right);
    }
}
```

* []

```Java
class Solution {
    Set<Integer> set = new HashSet<>();
    public int findSecondMinimumValue(TreeNode root) {
        bfs(root);
        if (set.size() < 2) return -1;
        int first = Integer.MAX_VALUE, second = Integer.MAX_VALUE;
        for (int i : set) {
            if (i <= first) {
                second = first;
                first = i;
            } else if (i <= second) {
                second = i;
            }
        }
        return second;
    }
    void bfs(TreeNode root) {
        Deque<TreeNode> d = new ArrayDeque<>();
        d.addLast(root);
        while (!d.isEmpty()) {
            TreeNode poll = d.pollFirst();
            set.add(poll.val);
            if (poll.left != null) d.addLast(poll.left);
            if (poll.right != null) d.addLast(poll.right);
        }
    }
}
```

* 时间复杂度：树的搜索复杂度为 $O(n)$，通过线性遍历找次小值，复杂度为 $O(n)$。整体复杂度为 $O(n)$
* 空间复杂度：$O(n)$

---

## 递归

解法一显然没有利用到本题核心条件 :「`root.val = min(root.left.val, root.right.val)`」和「每个子节点数量要么是 `0` 要么是 `2`」。

我们可以设计如下递归函数，含义为 **从 `root` 为根的树进行搜索，找到值比 `cur` 大的最小数**。然后使用全局变量 `ans` 存储答案。

* []

```Java
void dfs(TreeNode root, int cur)
```

那么最终搜索范围为 `dfs(root, root.val)`，这是因为 **性质 `root.val = min(root.left.val, root.right.val)`，即最小值会不断往上传递，最终根节点必然是全局最小值**。

然后再结合「每个子节点数量要么是 `0` 要么是 `2`」，我们可以特判一下 `ans` 是否为第一次赋值，如果给 `ans` 赋了新值或者更新了更小的 `ans`，则不再需要往下搜索了。

代码：

* []

```Java
class Solution {
    int ans = -1;
    public int findSecondMinimumValue(TreeNode root) {
        dfs(root, root.val);
        return ans;
    }
    void dfs(TreeNode root, int cur) {
        if (root == null) return ;
        if (root.val != cur) {
            if (ans == -1) ans = root.val;
            else ans = Math.min(ans, root.val);
            return ;
        }
        dfs(root.left, cur);
        dfs(root.right, cur);
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：忽略递归带来的空间开销。复杂度为 $O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~

package main

import (
	"fmt"
)

func main() {
	res := reverseBits2(43261596)
	fmt.Println("res is ", res)
}

/*
颠倒给定的 32 位无符号整数的二进制位。
示例 1：
输入: 00000010100101000001111010011100
输出: 00111001011110000010100101000000
解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
示例 2：
输入：11111111111111111111111111111101
输出：10111111111111111111111111111111
解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
      因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。
*/
func reverseBits(num uint32) uint32 {
	var count uint32 = 0

	for i := 0; i <= 31; i++ {
		count = count*2 + num%2
		num = num / 2
	}
	return count
}

func reverseBits2(num uint32) uint32 {
	var res uint32 = 0

	for i := 0; i <= 31; i++ {
		res = res<<1 + num&1
		num >>= 1
	}
	return res
}

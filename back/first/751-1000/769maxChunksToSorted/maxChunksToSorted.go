package main

func main() {
	
}

/*
数组arr是[0, 1, ..., arr.length - 1]的一种排列，我们将这个数组分割成几个“块”，
并将这些块分别进行排序。之后再连接起来，使得连接的结果和按升序排序后的原数组相同。
我们最多能将数组分成多少块？
示例 1:
输入: arr = [4,3,2,1,0]
输出: 1
解释:
将数组分成2块或者更多块，都无法得到所需的结果。
例如，分成 [4, 3], [2, 1, 0] 的结果是 [3, 4, 0, 1, 2]，这不是有序的数组。
示例 2:
输入: arr = [1,0,2,3,4]
输出: 4
解释:
我们可以把它分成两块，例如 [1, 0], [2, 3, 4]。
然而，分成 [1, 0], [2], [3], [4] 可以得到最多的块数。
注意:
arr 的长度在 [1, 10] 之间。
arr[i]是 [0, 1, ..., arr.length - 1]的一种排列。
*/

// arr 是[0, 1, ..., arr.length - 1]的排列，所以,下标的值的集合和arr中值的集合是一样的
// 所以不断更新当下区间的最右端，当遍历的下标与最右端重合的时候，说明这个区间已经自洽了
func maxChunksToSorted(arr []int) int {
	res, right := 0, 0
	for i := 0; i < len(arr); i++ {
		if arr[i] > right {
			right = arr[i]
		}
		if right == i {
			res++
		}
	}
	return res
}

package main

import (
	"fmt"
)

func main() {
	res := lexicalOrder(25)
	fmt.Println("res is ", res)
}

/*
给定一个整数 n, 返回从 1 到 n 的字典顺序。
例如，
给定 n =1 3，返回 [1,10,11,12,13,2,3,4,5,6,7,8,9] 。
请尽可能的优化算法的时间复杂度和空间复杂度。 输入的数据 n 小于等于 5,000,000。
*/

/*
山谷里有座千年古刹，一日，方丈收到一个任务，将1-n的字典排序进行输出；
思绪良久，方丈找来9个大法师，对第一个大法师说：“大弟子，我现在给你一个任务，我给你一个数字1，你负责把这个数字开头的，并且不大于n的所有数字按照字典排序交付于我。”
接着又对第二个大法师说：“二弟子，我也给你一个任务，我给你一个数字2，你负责把这个数字开头的，并且不大于n的所有数字按照字典排序交付于我。”
如是依次对剩下弟子说了一遍，各大法师领命依次离去；
大法师归于禅室，思虑良久：方觉方丈之策可复行之，乃唤来座下大弟子十人，依次要求将10,11,12...19开头的并且不大于n的所有数字交付于己。众大弟子离去，效法以行。
*/
func lexicalOrder(n int) []int {
	res := make([]int, 0)
	for i := 1; i < 10; i++ {
		dfs(n, i, &res)
	}
	return res
}
func dfs(n, cur int, res *[]int) {
	if cur > n {
		return
	}
	*res = append(*res, cur)
	for i := 0; i <= 9; i++ {
		dfs(n, cur*10+i, res)
	}
}

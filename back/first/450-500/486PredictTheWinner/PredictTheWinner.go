package main

import (
	"outback/leetcode/back/common"
)

func main() {
	
}

/*
给定一个表示分数的非负整数数组。 玩家 1 从数组任意一端拿取一个分数，随后玩家 2 继续从剩余数组任意一端拿取分数，然后玩家 1
拿，…… 。每次一个玩家只能拿取一个分数，分数被拿取之后不再可取。直到没有剩余分数可取时游戏结束。最终获得分数总和最多的玩家获胜。
给定一个表示分数的数组，预测玩家1是否会成为赢家。你可以假设每个玩家的玩法都会使他的分数最大化。
示例 1：
输入：[1, 5, 2]
输出：False
解释：一开始，玩家1可以从1和2中进行选择。
如果他选择 2（或者 1 ），那么玩家 2 可以从 1（或者 2 ）和 5 中进行选择。如果玩家 2 选择了 5 ，那么玩家 1 则只剩下 1（或者 2 ）可选。
所以，玩家 1 的最终分数为 1 + 2 = 3，而玩家 2 为 5 。
因此，玩家 1 永远不会成为赢家，返回 False 。
示例 2：
输入：[1, 5, 233, 7]
输出：True
解释：玩家 1 一开始选择 1 。然后玩家 2 必须从 5 和 7 中进行选择。无论玩家 2 选择了哪个，玩家 1 都可以选择 233 。
     最终，玩家 1（234 分）比玩家 2（12 分）获得更多的分数，所以返回 True，表示玩家 1 可以成为赢家。
提示：
    1 <= 给定的数组长度 <= 20.
    数组里所有分数都为非负数且不会大于 10000000 。
    如果最终两个玩家的分数相等，那么玩家 1 仍为赢家。
*/

// dp[i:j]表示，在i---j区间里，甲先手对已的净剩分，
// 相对分数 说成 净胜分 ，语义会更强一些。
// 甲乙比赛，甲先手面对区间[i...j]时，dp[i][j]表示甲对乙的净胜分。
// 最终求的就是，甲先手面对区间[0...n-1]时，甲对乙的净胜分dp[0][n-1]是否>=0。
// 甲先手面对区间[i...j]时，
//    如果甲拿nums[i]，那么变成乙先手面对区间[i+1...j]，这段区间内乙对甲的净胜分为dp[i+1][j]；那么甲对乙的净胜分就应该是nums[i] - dp[i+1][j]。
// 以上两种情况二者取大即可。

func PredictTheWinner(nums []int) bool {
	dp := make(map[int]map[int]int)
	// 初始化dp
	for i := 0; i < len(nums); i++ {
		dp[i] = make(map[int]int)
		// 初值
		dp[i][i] = nums[i]
	}
	// 这种方式也可以，但是不好理解
	// for j := 1; j < len(nums); j++ {
	// 	for i := j - 1; i >= 0; i-- {
	// 		dp[i][j] = Max(nums[i]-dp[i+1][j], nums[j]-dp[i][j-1])
	// 	}
	// }
	
	// dp的题，计算顺序很重要
	for i := len(nums) - 2; i >= 0; i-- {
		for j := i + 1; j < len(nums); j++ {
			dp[i][j] = common.Max(nums[i]-dp[i+1][j], nums[j]-dp[i][j-1])
		}
	}
	
	return dp[0][len(nums)-1] >= 0
}
